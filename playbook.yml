- hosts: all
  become: true
  remote_user: ec2-user
  tasks:
    - name: Update instance
      yum:
        name: "*"
        state: latest

    - name: Install docker
      yum:
        name: docker
        state: latest

    - name: Install pip
      yum:
        name: python-pip
        state: latest

    - name: add ec2-user to docker group
      user:
        name: ec2-user
        groups: docker
        append: yes

    - name: start docker
      service:
        name: docker
        state: started

    - name: Archive files
      archive:
        path: ./
        dest: /tmp/deployment.tar.gz
      delegate_to: localhost

    - name: Copy archive
      copy:
        src: /tmp/deployment.tar.gz
        dest: /tmp/deployment.tar.gz

    - name: Remove files in /tmp/deployment/
      file:
        path: /tmp/deployment/
        state: absent

    - name: Create directory /tmp/deployment/
      file:
        path: /tmp/deployment/
        state: directory

    - name: Unarchive files
      unarchive:
        src: /tmp/deployment.tar.gz
        dest: /tmp/deployment/
        remote_src: yes

    - name: Remove archive
      file:
        path: /tmp/deployment.tar.gz
        state: absent

    - name: Upgrade requests
      pip:
        name: "requests"
        state: latest
        extra_args: --ignore-installed

    - name: Install Docker SDK for Python
      pip:
        name:
          - "docker==6.1.3"
          - "docker-compose"
        state: present

    - name: Create .env file with SITE_ADDRESS
      copy:
        dest: /tmp/deployment/.env
        content: |
          MONGO_INITDB_ROOT_USERNAME={{ MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD={{ MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE={{ MONGO_INITDB_DATABASE }}
          MONGODB_USER={{ MONGODB_USER }}
          MONGODB_USER_PASSWORD={{ MONGODB_USER_PASSWORD }}
          SITE_ADDRESS={{ SITE_ADDRESS }}
          NEXT_PUBLIC_BASE_URL={{ NEXT_PUBLIC_BASE_URL }}
          PORT={{ PORT }}
          DEBUG={{ DEBUG }}

    - name: Check if network web exists
      command: docker network ls --filter name=^web$ --format={{'.Name'}}
      register: web_network

    - name: Create network web
      shell: docker network create web
      when: web_network.stdout == ""

    - name: Execute docker-compose for Deployement
      docker_compose:
        project_src: /tmp/deployment/
