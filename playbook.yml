- hosts: all
  become: true
  remote_user: hibo

  tasks:
    - name: Run the equivalent of "apt-get update" as a separate step
      apt:
        update_cache: true
        cache_valid_time: 3600
    - name: Update all packages to the latest version
      apt:
        upgrade: dist

    - name: Install Docker dependencies
      apt:
        name: "{{ item }}"
        state: latest
      loop:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg
        - lsb-release

    - name: Add Docker's official GPG key
      shell: curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

    - name: Set up the Docker stable repository
      apt_repository:
        repo: deb [arch=arm64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable

    - name: Update apt packages
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name: docker-ce
        state: latest

    - name: Install Python pip
      apt:
        name: python3-pip
        state: latest

    - name: Add hibo to Docker group
      user:
        name: hibo
        groups: docker
        append: yes

    - name: Start Docker service
      service:
        name: docker
        state: started

    - name: Archive files
      archive:
        path: ./
        dest: /var/deployment.tar.gz
      delegate_to: localhost

    - name: Copy archive
      copy:
        src: /var/deployment.tar.gz
        dest: /var/deployment.tar.gz

    - name: Create directory /var/deployment/
      file:
        path: /var/deployment/
        state: directory

    - name: Unarchive files
      unarchive:
        src: /var/deployment.tar.gz
        dest: /var/deployment/
        remote_src: yes

    - name: Remove archive
      file:
        path: /var/deployment.tar.gz
        state: absent

    - name: Install Docker SDK for Python
      pip:
        name: docker
        state: latest
    
    - name: Install Docker Compose
      pip:
        name: docker-compose
        state: latest

    - name: Create .env file with SITE_ADDRESS
      copy:
        dest: /var/deployment/.env
        content: |
          MONGO_INITDB_ROOT_USERNAME={{ MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD={{ MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_INITDB_DATABASE={{ MONGO_INITDB_DATABASE }}
          MONGODB_USER={{ MONGODB_USER }}
          MONGODB_USER_PASSWORD={{ MONGODB_USER_PASSWORD }}
          SITE_ADDRESS={{ SITE_ADDRESS }}
          NEXT_PUBLIC_BASE_URL=http://{{ SITE_ADDRESS }}:{{ PORT }}/
          PORT={{ PORT }}
          DEBUG={{ DEBUG }}

    - name: Check if network web exists
      command: docker network ls --filter name=^web$ --format={{'.Name'}}
      register: web_network

    - name: Create network web
      shell: docker network create web
      when: web_network.stdout == ""

    - name: Execute docker-compose for Deployment
      docker_compose:
        project_src: /var/deployment/
